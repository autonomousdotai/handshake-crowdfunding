package utils

import (
	"strings"
	"errors"
)

var DEFAULT_PAGE_SIZE = 20
var DEFAULT_PAGE = 1

var CROWD_STATUS_NEW = 0
var CROWD_STATUS_APPROVED = 1
var CROWD_STATUS_APPROVED_PROCESS = -11
var CROWD_STATUS_APPROVED_FAILED = -21
var CROWD_STATUS_FUNDED = 2
var CROWD_STATUS_FUNDED_PROCESS = 12
var CROWD_STATUS_FUNDED_FAILED = 22
var CROWD_STATUS_DELIVERED = 3
var CROWD_STATUS_DELIVERED_PROCESS = 13
var CROWD_STATUS_DELIVERED_FAILED = 23
var CROWD_STATUS_CANCELED = 4
var CROWD_STATUS_CANCELED_PROCESS = 14
var CROWD_STATUS_CANCELED_FAILED = 24
var CROWD_STATUS_FAILED = 5

var CROWD_ORDER_STATUS_NEW = 0
var CROWD_ORDER_STATUS_SHAKED = 1
var CROWD_ORDER_STATUS_SHAKED_PROCESS = -11
var CROWD_ORDER_STATUS_SHAKED_FAILED = -21
var CROWD_ORDER_STATUS_UNSHAKED = 2
var CROWD_ORDER_STATUS_UNSHAKED_PROCESS = 12
var CROWD_ORDER_STATUS_UNSHAKED_FAILED = 22
var CROWD_ORDER_STATUS_CANCELED = 3
var CROWD_ORDER_STATUS_CANCELED_PROCESS = 13
var CROWD_ORDER_STATUS_CANCELED_FAILED = 23
var CROWD_ORDER_STATUS_REFUNDED = 4
var CROWD_ORDER_STATUS_REFUNDED_PROCESS = 14
var CROWD_ORDER_STATUS_REFUNDED_FAILED = 24

var OFFCHAIN_CROWD = "cf"
var OFFCHAIN_CROWD_SHAKE = "cfs"
var OFFCHAIN_USER = "usr"

func ParseOffchain(offchain string) (string, string, error) {
	offchains := strings.Split(offchain, "_")
	if len(offchains) >= 2 {
		return strings.Trim(offchains[0], " "), strings.Trim(offchains[1], " "), nil
	}
	return "", "", errors.New("offchain is invalid")
}
